/*
 * ECE 461 - Spring 2023 - Project 2
 *
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 2.0.0
 * Contact: davisjam@purdue.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PackageRegistry.Models
{
    /// <summary>
    /// Package rating (cf. Project 1).  If the Project 1 that you inherited does not support one or more of the original properties, denote this with the value \&quot;-1\&quot;.
    /// </summary>
    [DataContract]
    public partial class PackageRating : IEquatable<PackageRating>
    {
        /// <summary>
        /// Gets or Sets BusFactor
        /// </summary>
        [Required]

        [DataMember(Name = "BusFactor")]
        public double? BusFactor { get; set; }

        /// <summary>
        /// Gets or Sets Correctness
        /// </summary>
        [Required]

        [DataMember(Name = "Correctness")]
        public double? Correctness { get; set; }

        /// <summary>
        /// Gets or Sets RampUp
        /// </summary>
        [Required]

        [DataMember(Name = "RampUp")]
        public double? RampUp { get; set; }

        /// <summary>
        /// Gets or Sets ResponsiveMaintainer
        /// </summary>
        [Required]

        [DataMember(Name = "ResponsiveMaintainer")]
        public double? ResponsiveMaintainer { get; set; }

        /// <summary>
        /// Gets or Sets LicenseScore
        /// </summary>
        [Required]

        [DataMember(Name = "LicenseScore")]
        public double? LicenseScore { get; set; }

        /// <summary>
        /// The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ &#x3D; 0.5 rating).
        /// </summary>
        /// <value>The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ &#x3D; 0.5 rating).</value>
        [Required]

        [DataMember(Name = "GoodPinningPractice")]
        public double? GoodPinningPractice { get; set; }

        /// <summary>
        /// The fraction of project code that was introduced through pull requests with a code review.
        /// </summary>
        /// <value>The fraction of project code that was introduced through pull requests with a code review.</value>
        [Required]

        [DataMember(Name = "PullRequest")]
        public double? PullRequest { get; set; }

        /// <summary>
        /// From Part 1
        /// </summary>
        /// <value>From Part 1</value>
        [Required]

        [DataMember(Name = "NetScore")]
        public double? NetScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageRating {\n");
            sb.Append("  BusFactor: ").Append(BusFactor).Append("\n");
            sb.Append("  Correctness: ").Append(Correctness).Append("\n");
            sb.Append("  RampUp: ").Append(RampUp).Append("\n");
            sb.Append("  ResponsiveMaintainer: ").Append(ResponsiveMaintainer).Append("\n");
            sb.Append("  LicenseScore: ").Append(LicenseScore).Append("\n");
            sb.Append("  GoodPinningPractice: ").Append(GoodPinningPractice).Append("\n");
            sb.Append("  PullRequest: ").Append(PullRequest).Append("\n");
            sb.Append("  NetScore: ").Append(NetScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PackageRating)obj);
        }

        /// <summary>
        /// Returns true if PackageRating instances are equal
        /// </summary>
        /// <param name="other">Instance of PackageRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageRating other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    BusFactor == other.BusFactor ||
                    BusFactor != null &&
                    BusFactor.Equals(other.BusFactor)
                ) &&
                (
                    Correctness == other.Correctness ||
                    Correctness != null &&
                    Correctness.Equals(other.Correctness)
                ) &&
                (
                    RampUp == other.RampUp ||
                    RampUp != null &&
                    RampUp.Equals(other.RampUp)
                ) &&
                (
                    ResponsiveMaintainer == other.ResponsiveMaintainer ||
                    ResponsiveMaintainer != null &&
                    ResponsiveMaintainer.Equals(other.ResponsiveMaintainer)
                ) &&
                (
                    LicenseScore == other.LicenseScore ||
                    LicenseScore != null &&
                    LicenseScore.Equals(other.LicenseScore)
                ) &&
                (
                    GoodPinningPractice == other.GoodPinningPractice ||
                    GoodPinningPractice != null &&
                    GoodPinningPractice.Equals(other.GoodPinningPractice)
                ) &&
                (
                    PullRequest == other.PullRequest ||
                    PullRequest != null &&
                    PullRequest.Equals(other.PullRequest)
                ) &&
                (
                    NetScore == other.NetScore ||
                    NetScore != null &&
                    NetScore.Equals(other.NetScore)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (BusFactor != null)
                    hashCode = hashCode * 59 + BusFactor.GetHashCode();
                if (Correctness != null)
                    hashCode = hashCode * 59 + Correctness.GetHashCode();
                if (RampUp != null)
                    hashCode = hashCode * 59 + RampUp.GetHashCode();
                if (ResponsiveMaintainer != null)
                    hashCode = hashCode * 59 + ResponsiveMaintainer.GetHashCode();
                if (LicenseScore != null)
                    hashCode = hashCode * 59 + LicenseScore.GetHashCode();
                if (GoodPinningPractice != null)
                    hashCode = hashCode * 59 + GoodPinningPractice.GetHashCode();
                if (PullRequest != null)
                    hashCode = hashCode * 59 + PullRequest.GetHashCode();
                if (NetScore != null)
                    hashCode = hashCode * 59 + NetScore.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PackageRating left, PackageRating right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PackageRating left, PackageRating right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
