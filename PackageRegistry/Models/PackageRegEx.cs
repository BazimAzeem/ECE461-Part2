/*
 * ECE 461 - Spring 2023 - Project 2
 *
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 2.3.5
 * Contact: davisjam@purdue.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace PackageRegistry.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PackageRegEx : IEquatable<PackageRegEx>
    {
        /// <summary>
        /// A regular expression over package names and READMEs that is used for searching for a package
        /// </summary>
        /// <value>A regular expression over package names and READMEs that is used for searching for a package</value>
        [Required]

        [DataMember(Name = "RegEx")]
        public string RegEx { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageRegEx {\n");
            sb.Append("  RegEx: ").Append(RegEx).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PackageRegEx)obj);
        }

        /// <summary>
        /// Returns true if PackageRegEx instances are equal
        /// </summary>
        /// <param name="other">Instance of PackageRegEx to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageRegEx other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    RegEx == other.RegEx ||
                    RegEx != null &&
                    RegEx.Equals(other.RegEx)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (RegEx != null)
                    hashCode = hashCode * 59 + RegEx.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(PackageRegEx left, PackageRegEx right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PackageRegEx left, PackageRegEx right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
