/*
 * ECE 461 - Spring 2023 - Project 2
 *
 * API for ECE 461/Spring 2023/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 2.0.0
 * Contact: davisjam@purdue.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.IO.Compression;
using System.Text;
using System.Text.Json;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;

using Newtonsoft.Json;
using ICSharpCode.SharpZipLib.Zip;

namespace PackageRegistry.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Package : IEquatable<Package>
    {
        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [Required]

        [DataMember(Name = "metadata")]
        public PackageMetadata Metadata { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [Required]

        [DataMember(Name = "data")]
        public PackageData Data { get; set; }

        public Package()
        {
            this.Metadata = new PackageMetadata();
            this.Data = new PackageData();
        }

        public static async Task<Package> CreateFromContent(string content)
        {
            var json = GetPackageJSON(content);
            Package package = new Package();
            package.Metadata.Name = json.GetProperty("name").ToString();
            package.Metadata.Version = json.GetProperty("version").ToString();
            package.Data.Content = content;
            package.Data.URL = json.GetProperty("homepage").ToString();

            return package;
        }

        public static async Task<Package> CreateFromURL(string url)
        {
            string content = await GetContentFromURL(url);
            var json = GetPackageJSON(content);
            Package package = new Package();
            package.Metadata.Name = json.GetProperty("name").ToString();
            package.Metadata.Version = json.GetProperty("version").ToString();
            package.Data.Content = content;
            package.Data.URL = url;

            return package;
        }

        public static async Task<string> GetContentFromURL(string url)
        {
            url = url.Contains("npmjs") ? Package.GetUrlFromNpmUrl(url) : url;
            string token = Environment.GetEnvironmentVariable("GITHUB_TOKEN");
            (string owner, string name) = GetOwnerAndNameFromURL(url);

            HttpClient httpClient = new HttpClient();
            var client = httpClient;
            httpClient.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("my-cool-cli", "1.0"));
            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
            var response = await client.GetAsync($"https://api.github.com/repos/{owner}/{name}/zipball/");
            Byte[] responseBytes = await response.Content.ReadAsByteArrayAsync();
            string responseString = Convert.ToBase64String(responseBytes);

            return responseString;
        }

        private static JsonElement GetPackageJSON(string content)
        {
            Byte[] bytes = Convert.FromBase64String(content);
            MemoryStream mem = new MemoryStream(bytes);
            ZipArchive zip = new ZipArchive(mem);

            ZipArchiveEntry packageJsonEntry = null;
            int highestLevel = Int32.MaxValue;
            foreach (ZipArchiveEntry entry in zip.Entries)
            {
                if (entry.Name == "package.json")
                {
                    int level = entry.FullName.Count(f => f == '/');
                    if (level < highestLevel)
                    {
                        highestLevel = level;
                        packageJsonEntry = zip.GetEntry(entry.FullName);
                    }
                }
            }
            StreamReader packageJsonReader = new StreamReader(packageJsonEntry.Open());
            string packageJsonContent = packageJsonReader.ReadToEnd();
            var json = System.Text.Json.JsonSerializer.Deserialize<JsonElement>(packageJsonContent);

            return json;
        }

        public static (string, string) GetOwnerAndNameFromURL(string url)
        {
            string owner, name;
            string[] phrases = url.Split("/");
            if (phrases.Length <= 2)
            {
                Program.LogError("Invalid github url: " + url);
                owner = "invalid";
                name = "invalid";
            }
            else
            {
                owner = phrases[phrases.Length - 2];
                name = phrases[phrases.Length - 1];
                if (name.Contains(".git"))
                {
                    name = name.Substring(0, name.Length - 4);
                }
            }
            return (owner, name);
        }

        public static string GetUrlFromNpmUrl(string url)
        {

            Task<string> urlScrape = scrapeForGitUrl(url);

            try
            {
                urlScrape.Wait(TimeSpan.FromSeconds(Program.REQUEST_TIMEOUT_TIME));
            }
            catch (AggregateException)
            { // probably a 404 error
                Program.LogError("Invalid library url: " + url);
                return null;
            }
            string gitUrl = urlScrape.Result;

            return gitUrl;
        }

        private async static Task<string> scrapeForGitUrl(string url)
        {

            // get package name from url
            string[] phrases = url.Split("/");
            string packageName = phrases[phrases.Length - 1];

            using var client = new HttpClient();

            var result = await client.GetStringAsync("https://registry.npmjs.org/" + packageName);

            // HACK this may be the least robust possible way of doing this 
            string[] tokens = result.Split("\"");
            foreach (string s in tokens)
            {
                if (s.Contains("github.com"))
                {
                    return s;
                }
            }

            return "no_url_found";

        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Package)obj);
        }

        /// <summary>
        /// Returns true if Package instances are equal
        /// </summary>
        /// <param name="other">Instance of Package to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Package other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Metadata == other.Metadata ||
                    Metadata != null &&
                    Metadata.Equals(other.Metadata)
                ) &&
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Metadata != null)
                    hashCode = hashCode * 59 + Metadata.GetHashCode();
                if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Package left, Package right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Package left, Package right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
